package com.dell.emc.basic.io.network;

/**
 * 网络操作
 * 我们的日常操作都是在和网络打交道，下面我们就开始学习一下网络相关的IO操作,在Java中的支持主要有以下几个方面:
 *
 * InetAddress 用于表示网络上的硬件资源，即 IP 地址
 * URL 统一资源定位符
 * Socket 使用 TCP 协议实现网络通信
 * Datagram 使用 UDP 协议实现网络通信;
 *
 *
 * ------------socket------------
 *
 * socket
 * 听到 **socket**，大家都不陌生，但是到底啥是 socket呢？
 * 我们平时日常开发大部分都是处理 「http」 请求,这都是应用层的
 *
 * ::: tip 所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。
 *  一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。
 *  从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，
 *  是应用程序与网络协议栈进行交互的接口 :::
 *
 * 套接字就是我们的 **socket**，还记得网络七层模型是哪七个吗？从下往上：
 * ::: tip 物理层（硬件） -> 数据链路层(网卡) -> 网络层(ip) -> 传输层 (tcp/udp ...)
 *          -> 会话层 -> 表示层 -> 应用层 :::
 *
 * 其中 「socket」 属于传输层(基于tcp/ip)，好了有多了一个概念，啥是tcp?
 *
 * TCP
 * 是一种面向连接的、可靠的、基于字节流的传输层通信协议，TCP 层是位于 IP 层之上，应用层之下的中间层。
 * TCP保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP / IP。
 *
 * socket是基于应用服务与TCP/IP通信之间的一个抽象，他将TCP/IP协议里面复杂的通信逻辑进行分装，
 * 对用户来说，只要通过一组简单的API就可以实现网络的连接。
 *
 * UDP
 * 既然tcp是可靠的链接，那么有不可靠的吗？有
 *
 * 其中UDP是一种面向无连接的传输层协议。UDP不关心对端是否真正收到了传送过去的数据。
 * 如果需要检查对端是否收到分组数据包，或者对端是否连接到网络，则需要在应用程序中实现。
 * UDP常用在分组数据较少或多播、广播通信以及视频通信等多媒体领域。
 *
 *
 */